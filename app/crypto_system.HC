#include "DCG.h"

U8 sbox[256] = {
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
};

U8 inv_sbox[256] = {
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
};

U32 rcon[10] = {
    0x01000000, 0x02000000, 0x04000000, 0x08000000, 0x10000000,
    0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
};

U0 SubBytes(U8 *state)
{
    for (I64 i = 0; i < 16; i++) {
        state[i] = sbox[state[i]];
    }
}

U0 InvSubBytes(U8 *state)
{
    for (I64 i = 0; i < 16; i++) {
        state[i] = inv_sbox[state[i]];
    }
}

U0 ShiftRows(U8 *state)
{
    U8 temp;
    temp = state[1];
    state[1] = state[5];
    state[5] = state[9];
    state[9] = state[13];
    state[13] = temp;
    
    temp = state[2];
    state[2] = state[10];
    state[10] = temp;
    temp = state[6];
    state[6] = state[14];
    state[14] = temp;
    
    temp = state[3];
    state[3] = state[15];
    state[15] = state[11];
    state[11] = state[7];
    state[7] = temp;
}

U0 InvShiftRows(U8 *state)
{
    U8 temp;
    temp = state[13];
    state[13] = state[9];
    state[9] = state[5];
    state[5] = state[1];
    state[1] = temp;
    
    temp = state[2];
    state[2] = state[10];
    state[10] = temp;
    temp = state[6];
    state[6] = state[14];
    state[14] = temp;
    
    temp = state[3];
    state[3] = state[7];
    state[7] = state[11];
    state[11] = state[15];
    state[15] = temp;
}

U8 GFMul(U8 a, U8 b)
{
    U8 result = 0;
    for (I64 i = 0; i < 8; i++) {
        if (b & 1) {
            result ^= a;
        }
        U8 carry = a & 0x80;
        a <<= 1;
        if (carry) {
            a ^= 0x1b;
        }
        b >>= 1;
    }
    return result;
}

U0 MixColumns(U8 *state)
{
    for (I64 i = 0; i < 4; i++) {
        U8 s0 = state[i*4];
        U8 s1 = state[i*4+1];
        U8 s2 = state[i*4+2];
        U8 s3 = state[i*4+3];
        
        state[i*4] = GFMul(0x02, s0) ^ GFMul(0x03, s1) ^ s2 ^ s3;
        state[i*4+1] = s0 ^ GFMul(0x02, s1) ^ GFMul(0x03, s2) ^ s3;
        state[i*4+2] = s0 ^ s1 ^ GFMul(0x02, s2) ^ GFMul(0x03, s3);
        state[i*4+3] = GFMul(0x03, s0) ^ s1 ^ s2 ^ GFMul(0x02, s3);
    }
}

U0 InvMixColumns(U8 *state)
{
    for (I64 i = 0; i < 4; i++) {
        U8 s0 = state[i*4];
        U8 s1 = state[i*4+1];
        U8 s2 = state[i*4+2];
        U8 s3 = state[i*4+3];
        
        state[i*4] = GFMul(0x0e, s0) ^ GFMul(0x0b, s1) ^ GFMul(0x0d, s2) ^ GFMul(0x09, s3);
        state[i*4+1] = GFMul(0x09, s0) ^ GFMul(0x0e, s1) ^ GFMul(0x0b, s2) ^ GFMul(0x0d, s3);
        state[i*4+2] = GFMul(0x0d, s0) ^ GFMul(0x09, s1) ^ GFMul(0x0e, s2) ^ GFMul(0x0b, s3);
        state[i*4+3] = GFMul(0x0b, s0) ^ GFMul(0x0d, s1) ^ GFMul(0x09, s2) ^ GFMul(0x0e, s3);
    }
}

U0 AddRoundKey(U8 *state, U8 *round_key)
{
    for (I64 i = 0; i < 16; i++) {
        state[i] ^= round_key[i];
    }
}

U0 KeyExpansion(U8 *key, U8 *expanded_key)
{
    for (I64 i = 0; i < 16; i++) {
        expanded_key[i] = key[i];
    }
    
    for (I64 i = 4; i < 44; i++) {
        U8 temp[4];
        for (I64 j = 0; j < 4; j++) {
            temp[j] = expanded_key[(i-1)*4 + j];
        }
        
        if (i % 4 == 0) {
            U8 t = temp[0];
            temp[0] = temp[1];
            temp[1] = temp[2];
            temp[2] = temp[3];
            temp[3] = t;
            
            for (I64 j = 0; j < 4; j++) {
                temp[j] = sbox[temp[j]];
            }
            
            temp[0] ^= (rcon[i/4 - 1] >> 24) & 0xFF;
        }
        
        for (I64 j = 0; j < 4; j++) {
            expanded_key[i*4 + j] = expanded_key[(i-4)*4 + j] ^ temp[j];
        }
    }
}

U0 AESEncrypt(U8 *plaintext, U8 *key, U8 *ciphertext)
{
    U8 state[16];
    U8 expanded_key[176];
    
    for (I64 i = 0; i < 16; i++) {
        state[i] = plaintext[i];
    }
    
    KeyExpansion(key, expanded_key);
    
    AddRoundKey(state, expanded_key);
    
    for (I64 round = 1; round < 10; round++) {
        SubBytes(state);
        ShiftRows(state);
        MixColumns(state);
        AddRoundKey(state, expanded_key + round*16);
    }
    
    SubBytes(state);
    ShiftRows(state);
    AddRoundKey(state, expanded_key + 160);
    
    for (I64 i = 0; i < 16; i++) {
        ciphertext[i] = state[i];
    }
}

U0 AESDecrypt(U8 *ciphertext, U8 *key, U8 *plaintext)
{
    U8 state[16];
    U8 expanded_key[176];
    
    for (I64 i = 0; i < 16; i++) {
        state[i] = ciphertext[i];
    }
    
    KeyExpansion(key, expanded_key);
    
    AddRoundKey(state, expanded_key + 160);
    
    for (I64 round = 9; round > 0; round--) {
        InvShiftRows(state);
        InvSubBytes(state);
        AddRoundKey(state, expanded_key + round*16);
        InvMixColumns(state);
    }
    
    InvShiftRows(state);
    InvSubBytes(state);
    AddRoundKey(state, expanded_key);
    
    for (I64 i = 0; i < 16; i++) {
        plaintext[i] = state[i];
    }
}

U0 SHA256Hash(U8 *data, I64 length, U8 *hash)
{
    U32 h0 = 0x6a09e667;
    U32 h1 = 0xbb67ae85;
    U32 h2 = 0x3c6ef372;
    U32 h3 = 0xa54ff53a;
    U32 h4 = 0x510e527f;
    U32 h5 = 0x9b05688c;
    U32 h6 = 0x1f83d9ab;
    U32 h7 = 0x5be0cd19;
    
    U32 k[64] = {
        0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
    };
    
    *(U32*)hash = h0;
    *((U32*)hash + 1) = h1;
    *((U32*)hash + 2) = h2;
    *((U32*)hash + 3) = h3;
    *((U32*)hash + 4) = h4;
    *((U32*)hash + 5) = h5;
    *((U32*)hash + 6) = h6;
    *((U32*)hash + 7) = h7;
}

U0 GenerateRandomKey(U8 *key, I64 length)
{
    for (I64 i = 0; i < length; i++) {
        key[i] = RandU16 % 256;
    }
} 